(()=>{"use strict";var n={870:(n,e,t)=>{t.d(e,{Z:()=>w});var i=t(15),o=t.n(i),r=t(645),s=t.n(r),a=t(667),c=t.n(a),d=t(234),l=t(239),A=t(380),h=t(671),p=t(546),f=s()(o()),u=c()(d.Z),m=c()(d.Z,{hash:"#iefix"}),g=c()(l.Z),y=c()(A.Z),C=c()(h.Z),b=c()(p.Z,{hash:"#fontello"});f.push([n.id,"@font-face {\n  font-family: 'fontello';\n  src: url("+u+");\n  src: url("+m+") format('embedded-opentype'),\n       url("+g+") format('woff2'),\n       url("+y+") format('woff'),\n       url("+C+") format('truetype'),\n       url("+b+") format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'fontello';\n    src: url('../font/fontello.svg?41228594#fontello') format('svg');\n  }\n}\n*/\n \n [class^=\"icon-\"]:before, [class*=\" icon-\"]:before {\n  font-family: \"fontello\";\n  font-style: normal;\n  font-weight: normal;\n \n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: .2em;\n  text-align: center;\n  /* opacity: .8; */\n \n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n \n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1.2em;\n \n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: .2em;\n \n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n \n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n \n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n \n.icon-pause:before { content: '\\e800'; } /* '' */\n.icon-play:before { content: '\\e801'; } /* '' */\n.icon-right-big:before { content: '\\e802'; } /* '' */\n.icon-left-big:before { content: '\\e803'; } /* '' */","",{version:3,sources:["webpack://./src/css/fontello.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,4CAAyC;EACzC;;;;4DAIgE;EAChE,mBAAmB;EACnB,kBAAkB;AACpB;AACA,gGAAgG;AAChG,2FAA2F;AAC3F;;;;;;;CAOC;;CAEA;EACC,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;;EAEnB,qBAAqB;EACrB,wBAAwB;EACxB,UAAU;EACV,kBAAkB;EAClB,kBAAkB;EAClB,iBAAiB;;EAEjB,gEAAgE;EAChE,oBAAoB;EACpB,oBAAoB;;EAEpB,8CAA8C;EAC9C,kBAAkB;;EAElB,gEAAgE;EAChE,yBAAyB;EACzB,iBAAiB;;EAEjB,0DAA0D;EAC1D,qBAAqB;;EAErB,6CAA6C;EAC7C,mCAAmC;EACnC,kCAAkC;;EAElC,4BAA4B;EAC5B,uDAAuD;AACzD;;AAEA,qBAAqB,gBAAgB,EAAE,EAAE,QAAQ;AACjD,oBAAoB,gBAAgB,EAAE,EAAE,QAAQ;AAChD,yBAAyB,gBAAgB,EAAE,EAAE,QAAQ;AACrD,wBAAwB,gBAAgB,EAAE,EAAE,QAAQ",sourcesContent:["@font-face {\n  font-family: 'fontello';\n  src: url('../font/fontello.eot?41228594');\n  src: url('../font/fontello.eot?41228594#iefix') format('embedded-opentype'),\n       url('../font/fontello.woff2?41228594') format('woff2'),\n       url('../font/fontello.woff?41228594') format('woff'),\n       url('../font/fontello.ttf?41228594') format('truetype'),\n       url('../font/fontello.svg?41228594#fontello') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'fontello';\n    src: url('../font/fontello.svg?41228594#fontello') format('svg');\n  }\n}\n*/\n \n [class^=\"icon-\"]:before, [class*=\" icon-\"]:before {\n  font-family: \"fontello\";\n  font-style: normal;\n  font-weight: normal;\n \n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: .2em;\n  text-align: center;\n  /* opacity: .8; */\n \n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n \n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1.2em;\n \n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: .2em;\n \n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n \n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n \n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n \n.icon-pause:before { content: '\\e800'; } /* '' */\n.icon-play:before { content: '\\e801'; } /* '' */\n.icon-right-big:before { content: '\\e802'; } /* '' */\n.icon-left-big:before { content: '\\e803'; } /* '' */"],sourceRoot:""}]);const w=f},5:(n,e,t)=>{t.d(e,{Z:()=>a});var i=t(15),o=t.n(i),r=t(645),s=t.n(r)()(o());s.push([n.id,'html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: rgb(25, 66, 30);\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: rgb(112, 17, 30);\n}\n\n#instructions {\n    display:none;\n    color: white;\n    display: none;\n    font-size: 0.7rem;\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#instructions strong{\n    font-size: 1rem;\n}\n\n#mobileController {\n    user-select: none;\n    display: none;\n    margin: 2px;\n    text-align: center;\n    flex-flow: row nowrap;\n}\n\n#mobileController div {\n    display: inline-block;\n    margin: 1px;\n}\n\n#leftSteer,\n#rightSteer,\n#playpause {\n    font-size: 1.2rem;\n    color: white;\n}\n\n#playpause {\n    background-color: green;\n    border-radius: 50%;\n    padding: 5px;\n}\n\n#leftSteer,\n#rightSteer {\n    flex-grow: 1;\n    background-color: #464647;\n    border-radius: 8px;\n    padding:3px;\n}\n#loader-div {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: aliceblue;\n    z-index: 9999;\n}\n#loader {\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    position: fixed;\n    top: 45%;\n    left: 45%;\n}\n#spinner {\n    border: 10px solid red;\n    border-top: 10px solid greenyellow;\n    border-right: 10px solid blue;\n    border-bottom: 10px solid yellow;\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    -webkit-animation: spin 1s linear infinite;\n    animation: spin 1s linear infinite;\n}\n\n@-webkit-keyframes spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n    }\n}\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n#score-div{\n    display: none;\n    position: fixed;\n    top: 25%;\n    left: 15%;\n    width: 70%;\n    height: 50%;\n    background-color: rgb(194, 226, 194);\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10px;\n}\n\n#score{\n    color: black;\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n}\n',"",{version:3,sources:["webpack://./src/css/globalStyles.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,UAAU;IACV,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,iCAAiC;AACrC;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,kCAAkC;AACtC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,4DAA4D;AAChE;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;;;IAGI,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;;IAEI,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,WAAW;AACf;AACA;IACI,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,aAAa;AACjB;AACA;IACI,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,eAAe;IACf,QAAQ;IACR,SAAS;AACb;AACA;IACI,sBAAsB;IACtB,kCAAkC;IAClC,6BAA6B;IAC7B,gCAAgC;IAChC,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,0CAA0C;IAC1C,kCAAkC;AACtC;;AAEA;IACI;QACI,+BAA+B;IACnC;IACA;QACI,iCAAiC;IACrC;AACJ;AACA;IACI;QACI,uBAAuB;IAC3B;IACA;QACI,yBAAyB;IAC7B;AACJ;;AAEA;IACI,aAAa;IACb,eAAe;IACf,QAAQ;IACR,SAAS;IACT,UAAU;IACV,WAAW;IACX,oCAAoC;IACpC,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:['html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: rgb(25, 66, 30);\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: rgb(112, 17, 30);\n}\n\n#instructions {\n    display:none;\n    color: white;\n    display: none;\n    font-size: 0.7rem;\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#instructions strong{\n    font-size: 1rem;\n}\n\n#mobileController {\n    user-select: none;\n    display: none;\n    margin: 2px;\n    text-align: center;\n    flex-flow: row nowrap;\n}\n\n#mobileController div {\n    display: inline-block;\n    margin: 1px;\n}\n\n#leftSteer,\n#rightSteer,\n#playpause {\n    font-size: 1.2rem;\n    color: white;\n}\n\n#playpause {\n    background-color: green;\n    border-radius: 50%;\n    padding: 5px;\n}\n\n#leftSteer,\n#rightSteer {\n    flex-grow: 1;\n    background-color: #464647;\n    border-radius: 8px;\n    padding:3px;\n}\n#loader-div {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: aliceblue;\n    z-index: 9999;\n}\n#loader {\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    position: fixed;\n    top: 45%;\n    left: 45%;\n}\n#spinner {\n    border: 10px solid red;\n    border-top: 10px solid greenyellow;\n    border-right: 10px solid blue;\n    border-bottom: 10px solid yellow;\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    -webkit-animation: spin 1s linear infinite;\n    animation: spin 1s linear infinite;\n}\n\n@-webkit-keyframes spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n    }\n}\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n#score-div{\n    display: none;\n    position: fixed;\n    top: 25%;\n    left: 15%;\n    width: 70%;\n    height: 50%;\n    background-color: rgb(194, 226, 194);\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10px;\n}\n\n#score{\n    color: black;\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n}\n'],sourceRoot:""}]);const a=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,i){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<n.length;a++){var c=[].concat(n[a]);i&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}n.exports=function(n){var t,i,o=(i=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],i=!0,o=!1,r=void 0;try{for(var s,a=n[Symbol.iterator]();!(i=(s=a.next()).done)&&(t.push(s.value),!e||t.length!==e);i=!0);}catch(n){o=!0,r=n}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return t}}(t,i)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var i=Object.prototype.toString.call(n).slice(8,-1);return"Object"===i&&n.constructor&&(i=n.constructor.name),"Map"===i||"Set"===i?Array.from(n):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(n,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),d="/*# ".concat(c," */"),l=s.sources.map((function(n){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(n," */")}));return[r].concat(l).concat([d]).join("\n")}return[r].join("\n")}},667:n=>{n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},234:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"fd7c82b5722a9e168057af4993ee7b96.eot"},546:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"638b4efab7e2e0ef419dec3fdf3aced7.svg"},671:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"bc0cc34f3eeb6c604cc1daa17dfc89dc.ttf"},239:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"70841526ac7ebed86a11944100d193a1.woff2"},380:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"e8fae9c76ccebe44ce0d80ab69ca4e53.woff"},379:(n,e,t)=>{var i,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),r=[];function s(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function a(n,e){for(var t={},i=[],o=0;o<n.length;o++){var a=n[o],c=e.base?a[0]+e.base:a[0],d=t[c]||0,l="".concat(c," ").concat(d);t[c]=d+1;var A=s(l),h={css:a[1],media:a[2],sourceMap:a[3]};-1!==A?(r[A].references++,r[A].updater(h)):r.push({identifier:l,updater:u(h,e),references:1}),i.push(l)}return i}function c(n){var e=document.createElement("style"),i=n.attributes||{};if(void 0===i.nonce){var r=t.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(n){e.setAttribute(n,i[n])})),"function"==typeof n.insert)n.insert(e);else{var s=o(n.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var d,l=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function A(n,e,t,i){var o=t?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var r=document.createTextNode(o),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(r,s[e]):n.appendChild(r)}}function h(n,e,t){var i=t.css,o=t.media,r=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=i;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(i))}}var p=null,f=0;function u(n,e){var t,i,o;if(e.singleton){var r=f++;t=p||(p=c(e)),i=A.bind(null,t,r,!1),o=A.bind(null,t,r,!0)}else t=c(e),i=h.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return i(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;i(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var t=a(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var i=0;i<t.length;i++){var o=s(t[i]);r[o].references--}for(var c=a(n,e),d=0;d<t.length;d++){var l=s(t[d]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}t=c}}}},258:(n,e,t)=>{t.d(e,{QJ:()=>V,Xl:()=>T,kT:()=>M,D4:()=>R,iB:()=>z,n$:()=>Z,vA:()=>j,dv:()=>W});var i=t(379),o=t.n(i),r=t(5);o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var s=t(870);o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;const a=7,c=3,d=5,l=8,A=40,h=75,p=120,f=60;const u=function(){function n(){var n=this;this.stripeCount=5,this.ctx=T;var e=j?Z.width/1.2:Z.width/2,t=(Z.width-e)/2;this.dimensions={height:Z.height,width:e,posX:t,posY:0},this.stripes=function(){for(var n=0,e=0,t=arguments.length;e<t;e++)n+=arguments[e].length;var i=Array(n),o=0;for(e=0;e<t;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(Array(this.stripeCount)).map((function(i,o){return{height:Z.height/(n.stripeCount+1),width:10,posX:t+e/2-5,posY:o*(Z.height/n.stripeCount)}})),this.stripes.unshift({height:Z.height/(this.stripeCount+1),width:10,posX:t+e/2-5,posY:Z.height/this.stripeCount*-1})}return n.prototype.getDimensions=function(){return this.dimensions},n.prototype.draw=function(){this.drawRoad(),this.drawStripes()},n.prototype.drawRoad=function(){this.ctx.fillStyle="#464647",this.ctx.fillRect(this.dimensions.posX,this.dimensions.posY,this.dimensions.width,this.dimensions.height)},n.prototype.drawStripes=function(){var n=this;this.ctx.fillStyle="#fff",this.stripes.forEach((function(e){n.ctx.fillRect(e.posX,e.posY,e.width,e.height)}))},n.prototype.update=function(){var n=this,e=this.dimensions.height;this.stripes.forEach((function(t){t.posY>e-e/Math.pow(n.stripeCount,2)?t.posY=Z.height/n.stripeCount*-1-(e-t.posY):t.posY+=a}))},n}(),m=t.p+"f9fb0e56ec468218961ccd1063fa67f6.mp3",g=function(){function n(n,e){this.roadDimensions=e,this.dimensions={posX:e.posX+e.width/2-A/2,posY:e.height-h-50,height:h,width:A},this.ctx=T,this.maxSteerSpeed=n,this.steerSpeed=0,this.carImage=V,this.carOnEdgeAudio=new Audio(m),this.carOnEdgeAudio.volume=.5,this.initialize()}return n.prototype.initialize=function(){this.initializeInputHandler()},n.prototype.getDimensions=function(){return this.dimensions},n.prototype.draw=function(){this.ctx.fillStyle="#0f0",this.ctx.drawImage(this.carImage,this.dimensions.posX,this.dimensions.posY)},n.prototype.updatePosition=function(){this.steerSpeed<0&&this.dimensions.posX>this.roadDimensions.posX&&(this.dimensions.posX+=this.steerSpeed),this.steerSpeed>0&&this.dimensions.posX+this.dimensions.width+3*this.steerSpeed<this.roadDimensions.posX+this.roadDimensions.width&&(this.dimensions.posX+=this.steerSpeed),this.isCarOnEdge()&&this.carOnEdgeAudio.play()},n.prototype.isCarOnEdge=function(){return!(!this.areNumbersCloseEnough(this.dimensions.posX,this.roadDimensions.posX)&&!this.areNumbersCloseEnough(this.dimensions.posX+this.dimensions.width,this.roadDimensions.posX+this.roadDimensions.width))},n.prototype.areNumbersCloseEnough=function(n,e){return Math.abs(n-e)<10},n.prototype.initializeInputHandler=function(){var n=this;if(document.addEventListener("keydown",(function(e){switch(e.code){case"ArrowLeft":n.steerSpeed=-n.maxSteerSpeed;break;case"ArrowRight":n.steerSpeed=n.maxSteerSpeed}})),document.addEventListener("keyup",(function(e){switch(e.code){case"ArrowLeft":case"ArrowRight":n.steerSpeed=0}})),j){var e=document.querySelector("#leftSteer"),t=document.querySelector("#rightSteer");e.addEventListener("touchstart",(function(e){n.steerSpeed=-n.maxSteerSpeed})),e.addEventListener("touchend",(function(e){n.steerSpeed=0})),e.addEventListener("mousedown",(function(e){n.steerSpeed=-n.maxSteerSpeed})),e.addEventListener("mouseup",(function(e){n.steerSpeed=0})),t.addEventListener("touchstart",(function(e){n.steerSpeed=n.maxSteerSpeed})),t.addEventListener("touchend",(function(e){n.steerSpeed=0})),t.addEventListener("mousedown",(function(e){n.steerSpeed=n.maxSteerSpeed})),t.addEventListener("mouseup",(function(e){n.steerSpeed=0}))}},n}();var y;!function(n){n[n.car=0]="car",n[n.truck=1]="truck",n[n.raceCar=2]="raceCar"}(y||(y={}));const C=function(){function n(e,t,i){this.dimensions={posX:n.getCarLocationBasedEnemyCarPosition(e,i),posY:e.posY-h,height:h,width:A},this.speed=t,this.img=M}return n.getCarLocationBasedEnemyCarPosition=function(n,e){var t=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*n.width,o=e.posX+.5*e.width+t*i;return(o=o>n.posX+n.width-1.5*e.width?n.posX+n.width-1.5*e.width:o)<n.posX?n.posX:o},n}(),b=function(){function n(e,t,i){this.dimensions={posX:n.getCarLocationBasedEnemyRaceCarPosition(e,i),posY:e.posY-h,height:h,width:A},this.speed=t,this.img=R}return n.getCarLocationBasedEnemyRaceCarPosition=function(n,e){var t=100*Math.random()<50?1:-1,i=.35*parseFloat(Math.random().toFixed(2))*n.width,o=e.posX+.5*e.width+t*i;return(o=o>n.posX+n.width-1.5*e.width?n.posX+n.width-1.5*e.width:o)<n.posX?n.posX:o},n}(),w=function(){function n(e,t,i){this.dimensions={posX:n.getCarLocationBasedEnemyCarPosition(e,i),posY:e.posY-p,height:p,width:f},this.speed=t,this.img=z}return n.getCarLocationBasedEnemyCarPosition=function(n,e){var t=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*n.width,o=e.posX+.5*e.width+t*i;return(o=o>n.posX+n.width-1.5*f?n.posX+n.width-1.5*f:o)<n.posX?n.posX:o},n}(),B=function(){function n(n,e){this.roadDimensions=n,this.car=e}return n.prototype.createVehicle=function(n,e){return n==y.car?new C(this.roadDimensions,e,this.car.getDimensions()):n==y.truck?new w(this.roadDimensions,e,this.car.getDimensions()):n==y.raceCar?new b(this.roadDimensions,e,this.car.getDimensions()):null},n}(),v=function(){function n(n,e){this.roadDimensions=n,this.car=e,this.ctx=T,this.enemyVehicleFactory=new B(n,e);var t=this.enemyVehicleFactory.createVehicle(y.car,d);this.latestEnemyVehicle=t,this.enemyVehicles=[t]}return n.prototype.insertNewEnemyVehicle=function(){if(this.latestEnemyVehicle.dimensions.posY>.25*this.roadDimensions.height&&Math.round(100*Math.random())<=10)if(Math.round(1e3*Math.random())<=200){var n=this.enemyVehicleFactory.createVehicle(y.truck,d);this.latestEnemyVehicle=n,this.enemyVehicles.push(n)}else if(Math.round(1e3*Math.random())>=900){var e=this.enemyVehicleFactory.createVehicle(y.raceCar,l);this.latestEnemyVehicle=e,this.enemyVehicles.push(e)}else{var t=this.enemyVehicleFactory.createVehicle(y.car,d);this.latestEnemyVehicle=t,this.enemyVehicles.push(t)}},n.prototype.deleteEnemyVehicle=function(){var n=this;this.enemyVehicles=this.enemyVehicles.filter((function(e){return!(e.dimensions.posY>n.roadDimensions.posY+n.roadDimensions.height)}))},n.prototype.updatePosition=function(){this.insertNewEnemyVehicle(),this.enemyVehicles.forEach((function(n){n.dimensions.posY+=n.speed})),this.deleteEnemyVehicle()},n.prototype.draw=function(){var n=this;this.ctx.fillStyle="#f00",this.enemyVehicles.forEach((function(e){n.ctx.drawImage(e.img,e.dimensions.posX,e.dimensions.posY)}))},n.prototype.detectCollision=function(){for(var n=this.car.getDimensions(),e=0,t=this.enemyVehicles;e<t.length;e++){var i=t[e].dimensions;if(i.posX<n.posX+n.width&&i.posX+i.width>n.posX&&i.posY<n.posY+n.height&&i.posY+i.height>n.posY)return!0}return!1},n}(),I=t.p+"e51479c288930b2152f712284edd2e76.mp3",E=t.p+"64267ce48e323a1e125ba00bdd02b010.png",x=function(){function n(n,e){this.gameArea=n,this.ctx=e,this.lastRenderTime=0,this.isGameInitialized=!1,this.isRunning=!1,this.carCrashAudio=new Audio(I),this.carCrashAudio.volume=.5,this.grassSprite=new Image,this.grassSprite.src=E}return n.prototype.initialize=function(){this.isGameInitialized=!0,this.road=new u,this.car=new g(c,this.road.getDimensions()),this.enemyVehicleManager=new v(this.road.getDimensions(),this.car),this.gameStartTime=Date.now();var n=this.ctx.createPattern(this.grassSprite,"repeat");this.ctx.rect(0,0,this.gameArea.width,this.gameArea.height),this.ctx.fillStyle=n,this.ctx.fill(),document.getElementById("score-div").style.display="none"},n.prototype.gameLoop=function(n){this.lastRenderTime,this.lastRenderTime=n,this.road.draw(),this.car.draw(),this.enemyVehicleManager.draw(),this.road.update(),this.enemyVehicleManager.updatePosition(),this.car.updatePosition(),this.enemyVehicleManager.detectCollision()&&(j&&(W.className="icon-play"),this.carCrashAudio.play(),this.isGameInitialized=!1,this.isRunning=!1,this.displayScore()),this.isRunning&&requestAnimationFrame(this.gameLoop.bind(this))},n.prototype.displayScore=function(){var n=Math.floor((Date.now()-this.gameStartTime)/10);document.getElementById("score-div").style.display="flex",document.getElementById("score").innerHTML='\n        <div style="margin-top:10px">\n            <span><em>Crashed! Final Score is </em><b>'+n+"</b>.</span>\n        </div>\n        "},n.prototype.run=function(){!0!==this.isRunning&&(this.initialize(),this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},n.prototype.continue=function(){!0!==this.isRunning&&(this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},n.prototype.pause=function(){!1!==this.isRunning&&(this.isRunning=!1)},n}(),S=t.p+"44d80d2e608a80573cfa2eef6bf6b73c.mp3",k=t.p+"2eef8a01c09f68c27815539d51769a0a.png",Y=t.p+"3866db8b28ad244b424f7785fb3dc622.png",X=t.p+"b4eb7ef2e833121435d0bfc428e24041.png",D=t.p+"f998a29ed6256543a794cb6e693b3804.png";var V,M,z,R;(V=new Image).src=k,(M=new Image).src=Y,(z=new Image).src=X,(R=new Image).src=D,setTimeout((function(){document.getElementById("loader-div").style.display="none"}),770),window.onresize=function(){location.reload()};var j=window.innerWidth<480;j?document.getElementById("mobileController").style.display="flex":document.getElementById("instructions").style.display="block";var L=document.querySelector("#gameArea");L.width=j?window.innerWidth:Math.floor(window.innerWidth/2),L.height=j?Math.floor(window.innerHeight/1.1):Math.floor(window.innerHeight/1.25);var Z={width:L.width,height:L.height},T=L.getContext("2d"),F=new Audio(S);F.volume=.1;var N=new x(L,T),W=document.getElementById("playpause");document.addEventListener("keydown",(function(n){"Space"===n.code&&(N.isGameInitialized?N.isRunning?(W.className="icon-play",F.play(),N.pause()):(W.className="icon-pause",F.play(),N.continue()):(W.className="icon-pause",F.play(),N.run()))})),W.addEventListener("click",(function(n){N.isGameInitialized?N.isRunning?(W.className="icon-play",F.play(),N.pause()):(W.className="icon-pause",F.play(),N.continue()):(W.className="icon-pause",F.play(),N.run())}))}},e={};function t(i){if(e[i])return e[i].exports;var o=e[i]={id:i,exports:{}};return n[i](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t(258)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,