(()=>{"use strict";var t={5:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),o=n.n(i),r=n(645),s=n.n(r)()(o());s.push([t.id,"html, body{\n    margin:0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: aqua;\n}","",{version:3,sources:["webpack://./src/css/globalStyles.css"],names:[],mappings:"AAAA;IACI,QAAQ;IACR,UAAU;IACV,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,sBAAsB;AAC1B",sourcesContent:["html, body{\n    margin:0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: aqua;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,o=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(u).concat([h]).join("\n")}return[r].join("\n")}},379:(t,e,n)=>{var i,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),r=[];function s(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var d=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(r[d].references++,r[d].updater(p)):r.push({identifier:u,updater:m(p,e),references:1}),i.push(u)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function d(t,e,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function p(t,e,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var l=null,f=0;function m(t,e){var n,i,o;if(e.singleton){var r=f++;n=l||(l=c(e)),i=d.bind(null,n,r,!1),o=d.bind(null,n,r,!0)}else n=c(e),i=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var o=s(n[i]);r[o].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=c}}}}},e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{const t=function(){function t(t,e){var n=this;this.stripeCount=6,this.ctx=t,this.dimensions={height:e.height,width:e.width/2,posX:.25*e.width,posY:0},this.Stripes=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(Array(this.stripeCount)).map((function(t,i){return{height:e.height/(n.stripeCount+1),width:10,posX:e.width/2-n.stripeCount,posY:i*(e.height/n.stripeCount)}}))}return t.prototype.getDimensions=function(){return this.dimensions},t.prototype.draw=function(){this.ctx.fillStyle="#000",this.ctx.fillRect(this.dimensions.posX,this.dimensions.posY,this.dimensions.width,this.dimensions.height)},t.prototype.drawStripes=function(){var t=this;this.ctx.fillStyle="#fff",this.Stripes.forEach((function(e){t.ctx.fillRect(e.posX,e.posY,e.width,e.height)}))},t.prototype.updateStripes=function(){var t=this;this.Stripes.forEach((function(e){e.posY>t.dimensions.height?e.posY=0:e.posY+=5}))},t}();var e=n(379),i=n.n(e),o=n(5);i()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const r=n.p+"2eef8a01c09f68c27815539d51769a0a.png",s=function(){function t(t,e){this.roadDimensions=e,this.dimensions={posX:e.posX+e.width/2-22.5,posY:e.height-75-50,height:75,width:45},this.ctx=t,this.maxSpeed=3,this.velocity=0,this.carImage=new Image,this.carImage.src=r}return t.prototype.getDimensions=function(){return this.dimensions},t.prototype.draw=function(){this.ctx.fillStyle="#0f0",this.ctx.drawImage(this.carImage,this.dimensions.posX,this.dimensions.posY)},t.prototype.updatePosition=function(){this.velocity<0&&this.dimensions.posX>this.roadDimensions.posX&&(this.dimensions.posX+=this.velocity),this.velocity>0&&this.dimensions.posX+this.dimensions.width<this.roadDimensions.posX+this.roadDimensions.width&&(this.dimensions.posX+=this.velocity)},t.prototype.initialiseInputHandler=function(){var t=this;document.addEventListener("keydown",(function(e){switch(e.code){case"ArrowLeft":t.velocity=-t.maxSpeed;break;case"ArrowRight":t.velocity=t.maxSpeed}})),document.addEventListener("keyup",(function(e){switch(e.code){case"ArrowLeft":case"ArrowRight":t.velocity=0}}))},t}(),a=function(t,e){this.roadDimensions=e,this.dimensions={posX:e.posX+parseFloat(Math.random().toFixed(2))*(e.width-45-70),posY:e.posY-100,height:75,width:45},this.ctx=t,this.speed=6},c=n.p+"6996ba69548d9097ee0d86869f01239f.png",h=function(){function t(t,e,n){this.carCount=0,this.roadDimensions=e,this.ctx=t,this.car=n;var i=new a(this.ctx,this.roadDimensions);this.latestEnemyCar=i,this.enemyCars=[i],this.enemyCarImage=new Image,this.enemyCarImage.src=c}return t.prototype.insertNewEnemyCar=function(){if(this.latestEnemyCar.dimensions.posY>.25*this.roadDimensions.height&&Math.round(100*Math.random())<=10){var t=new a(this.ctx,this.roadDimensions);this.latestEnemyCar=t,this.enemyCars.push(t),this.carCount++}},t.prototype.deleteEnemyCar=function(){var t=this;this.enemyCars=this.enemyCars.filter((function(e){return!(e.dimensions.posY>t.roadDimensions.posY+t.roadDimensions.height)})),this.carCount=this.enemyCars.length},t.prototype.updatePosition=function(){this.insertNewEnemyCar(),this.enemyCars.forEach((function(t){t.dimensions.posY+=t.speed})),this.deleteEnemyCar()},t.prototype.draw=function(){var t=this;this.ctx.fillStyle="#f00",this.enemyCars.forEach((function(e){t.ctx.drawImage(t.enemyCarImage,e.dimensions.posX,e.dimensions.posY)}))},t.prototype.detectCollision=function(){var t,e=this.car.getDimensions();t={up:e.posY,down:e.posY+e.height,left:e.posX,right:e.posX+e.width};for(var n=0,i=this.enemyCars;n<i.length;n++){var o=i[n],r={up:o.dimensions.posY,down:o.dimensions.posY+o.dimensions.height,left:o.dimensions.posX,right:o.dimensions.posX+o.dimensions.width};if(this.isColliding(r,t))return!0}return!1},t.prototype.isColliding=function(t,e){return t.left>=e.left&&t.left<=e.right&&t.up>=e.up&&t.up<=e.down||t.right>=e.left&&t.right<=e.right&&t.up>=e.up&&t.up<=e.down||t.left>=e.left&&t.left<=e.right&&t.down>=e.up&&t.down<=e.down||t.right>=e.left&&t.right<=e.right&&t.down>=e.up&&t.down<=e.down},t}();var u=new(function(){function e(t){this.gameAreaCanvasElement=t,this.ctx=t.getContext("2d"),this.lastRenderTime=0,this.gameDimensions={width:1080,height:720},this.gameAreaCanvasElement.width=1080,this.gameAreaCanvasElement.height=720,this.isGameInitialized=!1,this.isRunning=!1}return e.prototype.initialize=function(){this.isGameInitialized=!0,this.road=new t(this.ctx,this.gameDimensions),this.car=new s(this.ctx,this.road.getDimensions()),this.car.initialiseInputHandler(),this.enemyCarFactory=new h(this.ctx,this.road.getDimensions(),this.car)},e.prototype.gameLoop=function(t){this.lastRenderTime,this.lastRenderTime=t,this.road.draw(),this.road.drawStripes(),this.car.draw(),this.enemyCarFactory.draw(),this.road.updateStripes(),this.enemyCarFactory.updatePosition(),this.car.updatePosition(),this.enemyCarFactory.detectCollision()&&(this.isGameInitialized=!1,this.isRunning=!1),this.isRunning&&requestAnimationFrame(this.gameLoop.bind(this))},e.prototype.run=function(){!0!==this.isRunning&&(this.initialize(),this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.continue=function(){!0!==this.isRunning&&(this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.pause=function(){!1!==this.isRunning&&(this.isRunning=!1)},e}())(document.querySelector("#gameArea"));document.addEventListener("keydown",(function(t){switch(t.code){case"Space":u.isGameInitialized?u.isRunning?u.pause():u.continue():u.run()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,