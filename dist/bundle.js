(()=>{"use strict";var e={5:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(15),o=n.n(i),s=n(645),r=n.n(s)()(o());r.push([e.id,'html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background: #4b8833;\n}\n\n#instructions {\n    width: 400px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController {\n    display:none;\n    width: 400px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController div{\n    background-color: violet;\n    display: inline-block;\n}\n',"",{version:3,sources:["webpack://./src/css/globalStyles.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,UAAU;IACV,WAAW;IACX,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,4DAA4D;AAChE;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,4DAA4D;AAChE;;AAEA;IACI,wBAAwB;IACxB,qBAAqB;AACzB",sourcesContent:['html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background: #4b8833;\n}\n\n#instructions {\n    width: 400px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController {\n    display:none;\n    width: 400px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController div{\n    background-color: violet;\n    display: inline-block;\n}\n'],sourceRoot:""}]);const a=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(o[r]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);i&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}e.exports=function(e){var n,i,o=(i=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,o=!1,s=void 0;try{for(var r,a=e[Symbol.iterator]();!(i=(r=a.next()).done)&&(n.push(r.value),!t||n.length!==t);i=!0);}catch(e){o=!0,s=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw s}}return n}}(n,i)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?t(e,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[1],r=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),d=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[s].concat(d).concat([h]).join("\n")}return[s].join("\n")}},379:(e,t,n)=>{var i,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function r(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},i=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],h=n[c]||0,d="".concat(c," ").concat(h);n[c]=h+1;var p=r(d),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(s[p].references++,s[p].updater(u)):s.push({identifier:d,updater:f(u,t),references:1}),i.push(d)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var s=n.nc;s&&(i.nonce=s)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,d=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function p(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function u(e,t,n){var i=n.css,o=n.media,s=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var l=null,m=0;function f(e,t){var n,i,o;if(t.singleton){var s=m++;n=l||(l=c(t)),i=p.bind(null,n,s,!1),o=p.bind(null,n,s,!0)}else n=c(t),i=u.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=r(n[i]);s[o].references--}for(var c=a(e,t),h=0;h<n.length;h++){var d=r(n[h]);0===s[d].references&&(s[d].updater(),s.splice(d,1))}n=c}}}},269:(e,t,n)=>{n.d(t,{Xl:()=>k,n$:()=>R,vA:()=>D});var i=n(379),o=n.n(i),s=n(5);o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;const r=7,a=3,c=5,h=8,d=40,p=75,u=120,l=60;const m=function(){function e(){var e=this;this.stripeCount=5,this.ctx=k;var t=D?R.width/1.5:R.width/2,n=.25*R.width;this.dimensions={height:R.height,width:t,posX:n,posY:0},this.stripes=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),o=0;for(t=0;t<n;t++)for(var s=arguments[t],r=0,a=s.length;r<a;r++,o++)i[o]=s[r];return i}(Array(this.stripeCount)).map((function(i,o){return{height:R.height/(e.stripeCount+1),width:10,posX:n+t/2-5,posY:o*(R.height/e.stripeCount)}}))}return e.prototype.getDimensions=function(){return this.dimensions},e.prototype.draw=function(){this.drawRoad(),this.drawStripes()},e.prototype.drawRoad=function(){this.ctx.fillStyle="#464647",this.ctx.fillRect(this.dimensions.posX,this.dimensions.posY,this.dimensions.width,this.dimensions.height)},e.prototype.drawStripes=function(){var e=this;this.ctx.fillStyle="#fff",this.stripes.forEach((function(t){e.ctx.fillRect(t.posX,t.posY,t.width,t.height)}))},e.prototype.update=function(){var e=this,t=this.dimensions.height;this.stripes.forEach((function(n){n.posY>t-t/Math.pow(e.stripeCount,2)?n.posY=-(t-n.posY):n.posY+=r}))},e}(),f=n.p+"2eef8a01c09f68c27815539d51769a0a.png",g=n.p+"f9fb0e56ec468218961ccd1063fa67f6.mp3",y=function(){function e(e,t){this.roadDimensions=t,this.dimensions={posX:t.posX+t.width/2-d/2,posY:t.height-p-50,height:p,width:d},this.ctx=k,this.maxSteerSpeed=e,this.steerSpeed=0,this.carImage=new Image,this.carImage.src=f,this.carOnEdgeAudio=new Audio(g),this.initialize()}return e.prototype.initialize=function(){this.initializeInputHandler()},e.prototype.getDimensions=function(){return this.dimensions},e.prototype.draw=function(){this.ctx.fillStyle="#0f0",this.ctx.drawImage(this.carImage,this.dimensions.posX,this.dimensions.posY)},e.prototype.updatePosition=function(){this.steerSpeed<0&&(console.log("leftperp"),this.dimensions.posX>this.roadDimensions.posX&&(this.dimensions.posX+=this.steerSpeed)),this.steerSpeed>0&&(console.log("rightperp"),this.dimensions.posX+this.dimensions.width+3*this.steerSpeed<this.roadDimensions.posX+this.roadDimensions.width&&(this.dimensions.posX+=this.steerSpeed)),this.isCarOnEdge()&&this.carOnEdgeAudio.play()},e.prototype.isCarOnEdge=function(){return!(!this.areNumbersCloseEnough(this.dimensions.posX,this.roadDimensions.posX)&&!this.areNumbersCloseEnough(this.dimensions.posX+this.dimensions.width,this.roadDimensions.posX+this.roadDimensions.width))},e.prototype.areNumbersCloseEnough=function(e,t){return Math.abs(e-t)<10},e.prototype.initializeInputHandler=function(){var e=this;if(document.addEventListener("keydown",(function(t){switch(t.code){case"ArrowLeft":e.steerSpeed=-e.maxSteerSpeed;break;case"ArrowRight":e.steerSpeed=e.maxSteerSpeed}})),document.addEventListener("keyup",(function(t){switch(t.code){case"ArrowLeft":case"ArrowRight":e.steerSpeed=0}})),D){var t=document.querySelector("#leftSteer"),n=document.querySelector("#rightSteer");t.addEventListener("mousedown",(function(t){e.steerSpeed=-e.maxSteerSpeed,console.log("left",e.steerSpeed)})),n.addEventListener("mousedown",(function(t){e.steerSpeed=e.maxSteerSpeed})),t.addEventListener("mouseup",(function(t){e.steerSpeed=0,console.log("leftup",e.steerSpeed)})),n.addEventListener("mouseup",(function(t){e.steerSpeed=0}))}},e}();var A;!function(e){e[e.car=0]="car",e[e.truck=1]="truck",e[e.raceCar=2]="raceCar"}(A||(A={}));const w=n.p+"3866db8b28ad244b424f7785fb3dc622.png",v=function(){function e(t,n,i){this.dimensions={posX:e.getCarLocationBasedEnemyCarPosition(t,i),posY:t.posY-p,height:p,width:d},this.speed=n,this.img=new Image,this.img.src=w}return e.getCarLocationBasedEnemyCarPosition=function(e,t){var n=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*e.width,o=t.posX+.5*t.width+n*i;return(o=o>e.posX+e.width-1.5*t.width?e.posX+e.width-1.5*t.width:o)<e.posX?e.posX:o},e}(),b=n.p+"f998a29ed6256543a794cb6e693b3804.png",C=function(){function e(t,n,i){this.dimensions={posX:e.getCarLocationBasedEnemyRaceCarPosition(t,i),posY:t.posY-p,height:p,width:d},this.speed=n,this.img=new Image,this.img.src=b}return e.getCarLocationBasedEnemyRaceCarPosition=function(e,t){var n=100*Math.random()<50?1:-1,i=.35*parseFloat(Math.random().toFixed(2))*e.width,o=t.posX+.5*t.width+n*i;return(o=o>e.posX+e.width-1.5*t.width?e.posX+e.width-1.5*t.width:o)<e.posX?e.posX:o},e}(),S=n.p+"b4eb7ef2e833121435d0bfc428e24041.png",I=function(){function e(t,n,i){this.dimensions={posX:e.getCarLocationBasedEnemyCarPosition(t,i),posY:t.posY-u,height:u,width:l},this.speed=n,this.img=new Image,this.img.src=S}return e.getCarLocationBasedEnemyCarPosition=function(e,t){var n=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*e.width,o=t.posX+.5*t.width+n*i;return(o=o>e.posX+e.width-1.5*l?e.posX+e.width-1.5*l:o)<e.posX?e.posX:o},e}(),x=function(){function e(e,t){this.roadDimensions=e,this.car=t}return e.prototype.createVehicle=function(e,t){return e==A.car?new v(this.roadDimensions,t,this.car.getDimensions()):e==A.truck?new I(this.roadDimensions,t,this.car.getDimensions()):e==A.raceCar?new C(this.roadDimensions,t,this.car.getDimensions()):null},e}(),E=function(){function e(e,t){this.roadDimensions=e,this.car=t,this.ctx=k,this.enemyVehicleFactory=new x(e,t);var n=this.enemyVehicleFactory.createVehicle(A.car,c);this.latestEnemyVehicle=n,this.enemyVehicles=[n]}return e.prototype.insertNewEnemyVehicle=function(){if(this.latestEnemyVehicle.dimensions.posY>.25*this.roadDimensions.height&&Math.round(100*Math.random())<=10)if(Math.round(1e3*Math.random())<=200){var e=this.enemyVehicleFactory.createVehicle(A.truck,c);this.latestEnemyVehicle=e,this.enemyVehicles.push(e)}else if(Math.round(1e3*Math.random())>=900){var t=this.enemyVehicleFactory.createVehicle(A.raceCar,h);this.latestEnemyVehicle=t,this.enemyVehicles.push(t)}else{var n=this.enemyVehicleFactory.createVehicle(A.car,c);this.latestEnemyVehicle=n,this.enemyVehicles.push(n)}},e.prototype.deleteEnemyVehicle=function(){var e=this;this.enemyVehicles=this.enemyVehicles.filter((function(t){return!(t.dimensions.posY>e.roadDimensions.posY+e.roadDimensions.height)}))},e.prototype.updatePosition=function(){this.insertNewEnemyVehicle(),this.enemyVehicles.forEach((function(e){e.dimensions.posY+=e.speed})),this.deleteEnemyVehicle()},e.prototype.draw=function(){var e=this;this.ctx.fillStyle="#f00",this.enemyVehicles.forEach((function(t){e.ctx.drawImage(t.img,t.dimensions.posX,t.dimensions.posY)}))},e.prototype.detectCollision=function(){for(var e=this.car.getDimensions(),t=0,n=this.enemyVehicles;t<n.length;t++){var i=n[t].dimensions;if(i.posX<e.posX+e.width&&i.posX+i.width>e.posX&&i.posY<e.posY+e.height&&i.posY+i.height>e.posY)return!0}return!1},e}(),X=n.p+"e51479c288930b2152f712284edd2e76.mp3",B=n.p+"64267ce48e323a1e125ba00bdd02b010.png",V=function(){function e(e,t){this.gameArea=e,this.ctx=t,this.lastRenderTime=0,this.isGameInitialized=!1,this.isRunning=!1,this.carCrashAudio=new Audio(X),this.grassSprite=new Image,this.grassSprite.src=B}return e.prototype.initialize=function(){this.isGameInitialized=!0,this.road=new m,this.car=new y(a,this.road.getDimensions()),this.enemyVehicleManager=new E(this.road.getDimensions(),this.car);var e=this.ctx.createPattern(this.grassSprite,"repeat");this.ctx.rect(0,0,this.gameArea.width,this.gameArea.height),this.ctx.fillStyle=e,this.ctx.fill()},e.prototype.gameLoop=function(e){this.lastRenderTime,this.lastRenderTime=e,this.road.draw(),this.car.draw(),this.enemyVehicleManager.draw(),this.road.update(),this.enemyVehicleManager.updatePosition(),this.car.updatePosition(),this.enemyVehicleManager.detectCollision()&&(this.carCrashAudio.play(),this.isGameInitialized=!1,this.isRunning=!1),this.isRunning&&requestAnimationFrame(this.gameLoop.bind(this))},e.prototype.run=function(){!0!==this.isRunning&&(this.initialize(),this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.continue=function(){!0!==this.isRunning&&(this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.pause=function(){!1!==this.isRunning&&(this.isRunning=!1)},e}(),Y=n.p+"44d80d2e608a80573cfa2eef6bf6b73c.mp3";var D=window.innerWidth<480;D&&(document.getElementById("mobileController").style.display="block");var M=document.querySelector("#gameArea");M.width=D?window.innerWidth:800,M.height=D?window.innerHeight/1.1:600;var R={width:M.width,height:M.height},k=M.getContext("2d"),L=new Audio(Y),j=new V(M,k);document.addEventListener("keydown",(function(e){"Space"===e.code&&(j.isGameInitialized?j.isRunning?(L.play(),j.pause()):(L.play(),j.continue()):(L.play(),j.run()))}))}},t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={id:i,exports:{}};return e[i](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(269)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,