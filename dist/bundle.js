(()=>{"use strict";var t={5:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),o=n(645),r=n.n(o)()(s());r.push([t.id,"html, body{\n    margin:0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background: #4b8833;\n}\n\n#instructions{\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}","",{version:3,sources:["webpack://./src/css/globalStyles.css"],names:[],mappings:"AAAA;IACI,QAAQ;IACR,UAAU;IACV,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,4DAA4D;AAChE",sourcesContent:["html, body{\n    margin:0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background: #4b8833;\n}\n\n#instructions{\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(s[r]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],i=!0,s=!1,o=void 0;try{for(var r,a=t[Symbol.iterator]();!(i=(r=a.next()).done)&&(n.push(r.value),!e||n.length!==e);i=!0);}catch(t){s=!0,o=t}finally{try{i||null==a.return||a.return()}finally{if(s)throw o}}return n}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=s[1],r=s[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),d=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[o].concat(d).concat([h]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var i,s=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function r(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],s=0;s<t.length;s++){var a=t[s],c=e.base?a[0]+e.base:a[0],h=n[c]||0,d="".concat(c," ").concat(h);n[c]=h+1;var u=r(d),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(p)):o.push({identifier:d,updater:f(p,e),references:1}),i.push(d)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var r=s(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var h,d=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,n,i){var s=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=d(e,s);else{var o=document.createTextNode(s),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}function p(t,e,n){var i=n.css,s=n.media,o=n.sourceMap;if(s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var l=null,m=0;function f(t,e){var n,i,s;if(e.singleton){var o=m++;n=l||(l=c(e)),i=u.bind(null,n,o,!1),s=u.bind(null,n,o,!0)}else n=c(e),i=p.bind(null,n,e),s=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else s()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var s=r(n[i]);o[s].references--}for(var c=a(t,e),h=0;h<n.length;h++){var d=r(n[h]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}n=c}}}}},e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={id:i,exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{const t=function(){function t(t,e){var n=this;this.stripeCount=7,this.ctx=t,this.dimensions={height:e.height,width:e.width/2,posX:.25*e.width,posY:0},this.Stripes=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),s=0;for(e=0;e<n;e++)for(var o=arguments[e],r=0,a=o.length;r<a;r++,s++)i[s]=o[r];return i}(Array(this.stripeCount)).map((function(t,i){return{height:e.height/(n.stripeCount+1),width:10,posX:e.width/2-n.stripeCount,posY:i*(e.height/n.stripeCount)}}))}return t.prototype.getDimensions=function(){return this.dimensions},t.prototype.draw=function(){this.ctx.fillStyle="#000",this.ctx.fillRect(this.dimensions.posX,this.dimensions.posY,this.dimensions.width,this.dimensions.height)},t.prototype.drawStripes=function(){var t=this;this.ctx.fillStyle="#fff",this.Stripes.forEach((function(e){t.ctx.fillRect(e.posX,e.posY,e.width,e.height)}))},t.prototype.updateStripes=function(){var t=this;this.Stripes.forEach((function(e){e.posY>t.dimensions.height?e.posY=0:e.posY+=8}))},t}();var e=n(379),i=n.n(e),s=n(5);i()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;const o=n.p+"2eef8a01c09f68c27815539d51769a0a.png",r=n.p+"f9fb0e56ec468218961ccd1063fa67f6.mp3",a=function(){function t(t,e){this.roadDimensions=e,this.dimensions={posX:e.posX+e.width/2-22.5,posY:e.height-75-50,height:75,width:45},this.ctx=t,this.maxSpeed=3,this.velocity=0,this.carImage=new Image,this.carImage.src=o,this.carOnEdge=new Audio(r)}return t.prototype.getDimensions=function(){return this.dimensions},t.prototype.draw=function(){this.ctx.fillStyle="#0f0",this.ctx.drawImage(this.carImage,this.dimensions.posX,this.dimensions.posY)},t.prototype.updatePosition=function(){this.velocity<0&&this.dimensions.posX>this.roadDimensions.posX&&(this.dimensions.posX+=this.velocity),this.velocity>0&&this.dimensions.posX+this.dimensions.width+3<this.roadDimensions.posX+this.roadDimensions.width&&(this.dimensions.posX+=this.velocity),this.isCarOnEdge()?this.carOnEdge.play():console.log("na")},t.prototype.isCarOnEdge=function(){return!(!this.numberCloseEnough(this.dimensions.posX,this.roadDimensions.posX)&&!this.numberCloseEnough(this.dimensions.posX+this.dimensions.width,this.roadDimensions.posX+this.roadDimensions.width))},t.prototype.numberCloseEnough=function(t,e){return Math.abs(t-e)<4},t.prototype.initialiseInputHandler=function(){var t=this;document.addEventListener("keydown",(function(e){switch(e.code){case"ArrowLeft":t.velocity=-t.maxSpeed;break;case"ArrowRight":t.velocity=t.maxSpeed}})),document.addEventListener("keyup",(function(e){switch(e.code){case"ArrowLeft":case"ArrowRight":t.velocity=0}}))},t}(),c=function(t,e){this.roadDimensions=e,this.dimensions={posX:e.posX+parseFloat(Math.random().toFixed(2))*(e.width-45-70),posY:e.posY-100,height:75,width:45},this.ctx=t,this.speed=10},h=n.p+"6996ba69548d9097ee0d86869f01239f.png",d=function(){function t(t,e,n){this.carCount=0,this.roadDimensions=e,this.ctx=t,this.car=n;var i=new c(this.ctx,this.roadDimensions);this.latestEnemyCar=i,this.enemyCars=[i],this.enemyCarImage=new Image,this.enemyCarImage.src=h}return t.prototype.insertNewEnemyCar=function(){if(this.latestEnemyCar.dimensions.posY>.25*this.roadDimensions.height&&Math.round(100*Math.random())<=10){var t=new c(this.ctx,this.roadDimensions);this.latestEnemyCar=t,this.enemyCars.push(t),this.carCount++}},t.prototype.deleteEnemyCar=function(){var t=this;this.enemyCars=this.enemyCars.filter((function(e){return!(e.dimensions.posY>t.roadDimensions.posY+t.roadDimensions.height)})),this.carCount=this.enemyCars.length},t.prototype.updatePosition=function(){this.insertNewEnemyCar(),this.enemyCars.forEach((function(t){t.dimensions.posY+=t.speed})),this.deleteEnemyCar()},t.prototype.draw=function(){var t=this;this.ctx.fillStyle="#f00",this.enemyCars.forEach((function(e){t.ctx.drawImage(t.enemyCarImage,e.dimensions.posX,e.dimensions.posY)}))},t.prototype.detectCollision=function(){var t,e=this.car.getDimensions();t={up:e.posY,down:e.posY+e.height,left:e.posX,right:e.posX+e.width};for(var n=0,i=this.enemyCars;n<i.length;n++){var s=i[n],o={up:s.dimensions.posY,down:s.dimensions.posY+s.dimensions.height,left:s.dimensions.posX,right:s.dimensions.posX+s.dimensions.width};if(this.isColliding(o,t))return!0}return!1},t.prototype.isColliding=function(t,e){return t.left>=e.left&&t.left<=e.right&&t.up>=e.up&&t.up<=e.down||t.right>=e.left&&t.right<=e.right&&t.up>=e.up&&t.up<=e.down||t.left>=e.left&&t.left<=e.right&&t.down>=e.up&&t.down<=e.down||t.right>=e.left&&t.right<=e.right&&t.down>=e.up&&t.down<=e.down},t}(),u=n.p+"e51479c288930b2152f712284edd2e76.mp3",p=n.p+"64267ce48e323a1e125ba00bdd02b010.png",l=function(){function e(t){this.gameAreaCanvasElement=t,this.ctx=t.getContext("2d"),this.lastRenderTime=0,this.gameDimensions={width:800,height:600},this.gameAreaCanvasElement.width=800,this.gameAreaCanvasElement.height=600,this.isGameInitialized=!1,this.isRunning=!1,this.carCrash=new Audio(u),this.grassSprite=new Image,this.grassSprite.src=p}return e.prototype.initialize=function(){this.isGameInitialized=!0,this.road=new t(this.ctx,this.gameDimensions),this.car=new a(this.ctx,this.road.getDimensions()),this.car.initialiseInputHandler(),this.enemyCarFactory=new d(this.ctx,this.road.getDimensions(),this.car);var e=this.ctx.createPattern(this.grassSprite,"repeat");this.ctx.rect(0,0,this.gameAreaCanvasElement.width,this.gameAreaCanvasElement.height),this.ctx.fillStyle=e,this.ctx.fill()},e.prototype.gameLoop=function(t){this.lastRenderTime,this.lastRenderTime=t,this.road.draw(),this.road.drawStripes(),this.car.draw(),this.enemyCarFactory.draw(),this.road.updateStripes(),this.enemyCarFactory.updatePosition(),this.car.updatePosition(),this.enemyCarFactory.detectCollision()&&(this.carCrash.play(),this.isGameInitialized=!1,this.isRunning=!1),this.isRunning&&requestAnimationFrame(this.gameLoop.bind(this))},e.prototype.run=function(){!0!==this.isRunning&&(this.initialize(),this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.continue=function(){!0!==this.isRunning&&(this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.pause=function(){!1!==this.isRunning&&(this.isRunning=!1)},e}(),m=n.p+"44d80d2e608a80573cfa2eef6bf6b73c.mp3";var f=document.querySelector("#gameArea"),g=new Audio(m),y=new l(f);document.addEventListener("keydown",(function(t){"Space"===t.code&&(y.isGameInitialized?y.isRunning?(g.play(),y.pause()):(g.play(),y.continue()):(g.play(),y.run()))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,