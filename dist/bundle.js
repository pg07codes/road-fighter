(()=>{"use strict";var e={870:(e,n,t)=>{t.d(n,{Z:()=>C});var i=t(15),o=t.n(i),r=t(645),s=t.n(r),a=t(667),c=t.n(a),h=t(234),d=t(239),l=t(380),p=t(671),f=t(546),u=s()(o()),m=c()(h.Z),A=c()(h.Z,{hash:"#iefix"}),g=c()(d.Z),y=c()(l.Z),w=c()(p.Z),b=c()(f.Z,{hash:"#fontello"});u.push([e.id,"@font-face {\n  font-family: 'fontello';\n  src: url("+m+");\n  src: url("+A+") format('embedded-opentype'),\n       url("+g+") format('woff2'),\n       url("+y+") format('woff'),\n       url("+w+") format('truetype'),\n       url("+b+") format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'fontello';\n    src: url('../font/fontello.svg?41228594#fontello') format('svg');\n  }\n}\n*/\n \n [class^=\"icon-\"]:before, [class*=\" icon-\"]:before {\n  font-family: \"fontello\";\n  font-style: normal;\n  font-weight: normal;\n \n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: .2em;\n  text-align: center;\n  /* opacity: .8; */\n \n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n \n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1.2em;\n \n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: .2em;\n \n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n \n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n \n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n \n.icon-pause:before { content: '\\e800'; } /* '' */\n.icon-play:before { content: '\\e801'; } /* '' */\n.icon-right-big:before { content: '\\e802'; } /* '' */\n.icon-left-big:before { content: '\\e803'; } /* '' */","",{version:3,sources:["webpack://./src/css/fontello.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,4CAAyC;EACzC;;;;4DAIgE;EAChE,mBAAmB;EACnB,kBAAkB;AACpB;AACA,gGAAgG;AAChG,2FAA2F;AAC3F;;;;;;;CAOC;;CAEA;EACC,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;;EAEnB,qBAAqB;EACrB,wBAAwB;EACxB,UAAU;EACV,kBAAkB;EAClB,kBAAkB;EAClB,iBAAiB;;EAEjB,gEAAgE;EAChE,oBAAoB;EACpB,oBAAoB;;EAEpB,8CAA8C;EAC9C,kBAAkB;;EAElB,gEAAgE;EAChE,yBAAyB;EACzB,iBAAiB;;EAEjB,0DAA0D;EAC1D,qBAAqB;;EAErB,6CAA6C;EAC7C,mCAAmC;EACnC,kCAAkC;;EAElC,4BAA4B;EAC5B,uDAAuD;AACzD;;AAEA,qBAAqB,gBAAgB,EAAE,EAAE,QAAQ;AACjD,oBAAoB,gBAAgB,EAAE,EAAE,QAAQ;AAChD,yBAAyB,gBAAgB,EAAE,EAAE,QAAQ;AACrD,wBAAwB,gBAAgB,EAAE,EAAE,QAAQ",sourcesContent:["@font-face {\n  font-family: 'fontello';\n  src: url('../font/fontello.eot?41228594');\n  src: url('../font/fontello.eot?41228594#iefix') format('embedded-opentype'),\n       url('../font/fontello.woff2?41228594') format('woff2'),\n       url('../font/fontello.woff?41228594') format('woff'),\n       url('../font/fontello.ttf?41228594') format('truetype'),\n       url('../font/fontello.svg?41228594#fontello') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'fontello';\n    src: url('../font/fontello.svg?41228594#fontello') format('svg');\n  }\n}\n*/\n \n [class^=\"icon-\"]:before, [class*=\" icon-\"]:before {\n  font-family: \"fontello\";\n  font-style: normal;\n  font-weight: normal;\n \n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: .2em;\n  text-align: center;\n  /* opacity: .8; */\n \n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n \n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1.2em;\n \n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: .2em;\n \n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n \n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n \n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n \n.icon-pause:before { content: '\\e800'; } /* '' */\n.icon-play:before { content: '\\e801'; } /* '' */\n.icon-right-big:before { content: '\\e802'; } /* '' */\n.icon-left-big:before { content: '\\e803'; } /* '' */"],sourceRoot:""}]);const C=u},5:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(15),o=t.n(i),r=t(645),s=t.n(r)()(o());s.push([e.id,'html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: rgb(25, 66, 30);\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: rgb(112, 17, 30);\n}\n\n#instructions {\n    color: white;\n    display:none;\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController {\n    user-select: none;\n    display:none;\n    margin: 2px;\n    text-align: center;\n    flex-flow: row nowrap;\n}\n\n#mobileController div{\n    display: inline-block;\n    margin: 1px;\n}\n\n#leftSteer , #rightSteer , #playpause{\n    font-size: 1.2rem;\n    color: white;\n}\n\n#playpause{\n    background-color: green;\n    border-radius: 50%;\n    padding: 3px;\n}\n\n#leftSteer , #rightSteer{\n    flex-grow: 1;\n    background-color: #464647;\n    border-radius:8px ;\n}',"",{version:3,sources:["webpack://./src/css/globalStyles.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,UAAU;IACV,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,iCAAiC;AACrC;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,kCAAkC;AACtC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,4DAA4D;AAChE;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;AACtB",sourcesContent:['html,\nbody {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: rgb(25, 66, 30);\n}\n\n#gameArea {\n    border: black solid 1px;\n    margin: 0 auto;\n    display: block;\n    background-color: rgb(112, 17, 30);\n}\n\n#instructions {\n    color: white;\n    display:none;\n    width: 600px;\n    margin: 10px auto;\n    text-align: center;\n    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#mobileController {\n    user-select: none;\n    display:none;\n    margin: 2px;\n    text-align: center;\n    flex-flow: row nowrap;\n}\n\n#mobileController div{\n    display: inline-block;\n    margin: 1px;\n}\n\n#leftSteer , #rightSteer , #playpause{\n    font-size: 1.2rem;\n    color: white;\n}\n\n#playpause{\n    background-color: green;\n    border-radius: 50%;\n    padding: 3px;\n}\n\n#leftSteer , #rightSteer{\n    flex-grow: 1;\n    background-color: #464647;\n    border-radius:8px ;\n}'],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);i&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,i=new Array(n);t<n;t++)i[t]=e[t];return i}e.exports=function(e){var t,i,o=(i=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],i=!0,o=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(t.push(s.value),!n||t.length!==n);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return t}}(t,i)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(e,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),d=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[r].concat(d).concat([h]).join("\n")}return[r].join("\n")}},667:e=>{e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},234:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"fd7c82b5722a9e168057af4993ee7b96.eot"},546:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"638b4efab7e2e0ef419dec3fdf3aced7.svg"},671:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"bc0cc34f3eeb6c604cc1daa17dfc89dc.ttf"},239:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"70841526ac7ebed86a11944100d193a1.woff2"},380:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"e8fae9c76ccebe44ce0d80ab69ca4e53.woff"},379:(e,n,t)=>{var i,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),r=[];function s(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function a(e,n){for(var t={},i=[],o=0;o<e.length;o++){var a=e[o],c=n.base?a[0]+n.base:a[0],h=t[c]||0,d="".concat(c," ").concat(h);t[c]=h+1;var l=s(d),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(r[l].references++,r[l].updater(p)):r.push({identifier:d,updater:m(p,n),references:1}),i.push(d)}return i}function c(e){var n=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=t.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){n.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(n);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var h,d=(h=[],function(e,n){return h[e]=n,h.filter(Boolean).join("\n")});function l(e,n,t,i){var o=t?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var r=document.createTextNode(o),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(r,s[n]):e.appendChild(r)}}function p(e,n,t){var i=t.css,o=t.media,r=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,u=0;function m(e,n){var t,i,o;if(n.singleton){var r=u++;t=f||(f=c(n)),i=l.bind(null,t,r,!1),o=l.bind(null,t,r,!0)}else t=c(n),i=p.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return i(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;i(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var t=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<t.length;i++){var o=s(t[i]);r[o].references--}for(var c=a(e,n),h=0;h<t.length;h++){var d=s(t[h]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}t=c}}}},258:(e,n,t)=>{t.d(n,{Xl:()=>M,n$:()=>L,vA:()=>V,dv:()=>j});var i=t(379),o=t.n(i),r=t(5);o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var s=t(870);o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;const a=7,c=3,h=5,d=8,l=40,p=75,f=120,u=60;const m=function(){function e(){var e=this;this.stripeCount=5,this.ctx=M;var n=V?L.width/1.2:L.width/2,t=(L.width-n)/2;this.dimensions={height:L.height,width:n,posX:t,posY:0},this.stripes=function(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;var i=Array(e),o=0;for(n=0;n<t;n++)for(var r=arguments[n],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(Array(this.stripeCount)).map((function(i,o){return{height:L.height/(e.stripeCount+1),width:10,posX:t+n/2-5,posY:o*(L.height/e.stripeCount)}}))}return e.prototype.getDimensions=function(){return this.dimensions},e.prototype.draw=function(){this.drawRoad(),this.drawStripes()},e.prototype.drawRoad=function(){this.ctx.fillStyle="#464647",this.ctx.fillRect(this.dimensions.posX,this.dimensions.posY,this.dimensions.width,this.dimensions.height)},e.prototype.drawStripes=function(){var e=this;this.ctx.fillStyle="#fff",this.stripes.forEach((function(n){e.ctx.fillRect(n.posX,n.posY,n.width,n.height)}))},e.prototype.update=function(){var e=this,n=this.dimensions.height;this.stripes.forEach((function(t){t.posY>n-n/Math.pow(e.stripeCount,2)?t.posY=-(n-t.posY):t.posY+=a}))},e}(),A=t.p+"2eef8a01c09f68c27815539d51769a0a.png",g=t.p+"f9fb0e56ec468218961ccd1063fa67f6.mp3",y=function(){function e(e,n){this.roadDimensions=n,this.dimensions={posX:n.posX+n.width/2-l/2,posY:n.height-p-50,height:p,width:l},this.ctx=M,this.maxSteerSpeed=e,this.steerSpeed=0,this.carImage=new Image,this.carImage.src=A,this.carOnEdgeAudio=new Audio(g),this.initialize()}return e.prototype.initialize=function(){this.initializeInputHandler()},e.prototype.getDimensions=function(){return this.dimensions},e.prototype.draw=function(){this.ctx.fillStyle="#0f0",this.ctx.drawImage(this.carImage,this.dimensions.posX,this.dimensions.posY)},e.prototype.updatePosition=function(){this.steerSpeed<0&&this.dimensions.posX>this.roadDimensions.posX&&(this.dimensions.posX+=this.steerSpeed),this.steerSpeed>0&&this.dimensions.posX+this.dimensions.width+3*this.steerSpeed<this.roadDimensions.posX+this.roadDimensions.width&&(this.dimensions.posX+=this.steerSpeed),this.isCarOnEdge()&&this.carOnEdgeAudio.play()},e.prototype.isCarOnEdge=function(){return!(!this.areNumbersCloseEnough(this.dimensions.posX,this.roadDimensions.posX)&&!this.areNumbersCloseEnough(this.dimensions.posX+this.dimensions.width,this.roadDimensions.posX+this.roadDimensions.width))},e.prototype.areNumbersCloseEnough=function(e,n){return Math.abs(e-n)<10},e.prototype.initializeInputHandler=function(){var e=this;if(document.addEventListener("keydown",(function(n){switch(n.code){case"ArrowLeft":e.steerSpeed=-e.maxSteerSpeed;break;case"ArrowRight":e.steerSpeed=e.maxSteerSpeed}})),document.addEventListener("keyup",(function(n){switch(n.code){case"ArrowLeft":case"ArrowRight":e.steerSpeed=0}})),V){var n=document.querySelector("#leftSteer"),t=document.querySelector("#rightSteer");n.addEventListener("touchstart",(function(n){e.steerSpeed=-e.maxSteerSpeed})),n.addEventListener("touchend",(function(n){e.steerSpeed=0})),n.addEventListener("mousedown",(function(n){e.steerSpeed=-e.maxSteerSpeed})),n.addEventListener("mouseup",(function(n){e.steerSpeed=0})),t.addEventListener("touchstart",(function(n){e.steerSpeed=e.maxSteerSpeed})),t.addEventListener("touchend",(function(n){e.steerSpeed=0})),t.addEventListener("mousedown",(function(n){e.steerSpeed=e.maxSteerSpeed})),t.addEventListener("mouseup",(function(n){e.steerSpeed=0}))}},e}();var w;!function(e){e[e.car=0]="car",e[e.truck=1]="truck",e[e.raceCar=2]="raceCar"}(w||(w={}));const b=t.p+"3866db8b28ad244b424f7785fb3dc622.png",C=function(){function e(n,t,i){this.dimensions={posX:e.getCarLocationBasedEnemyCarPosition(n,i),posY:n.posY-p,height:p,width:l},this.speed=t,this.img=new Image,this.img.src=b}return e.getCarLocationBasedEnemyCarPosition=function(e,n){var t=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*e.width,o=n.posX+.5*n.width+t*i;return(o=o>e.posX+e.width-1.5*n.width?e.posX+e.width-1.5*n.width:o)<e.posX?e.posX:o},e}(),B=t.p+"f998a29ed6256543a794cb6e693b3804.png",v=function(){function e(n,t,i){this.dimensions={posX:e.getCarLocationBasedEnemyRaceCarPosition(n,i),posY:n.posY-p,height:p,width:l},this.speed=t,this.img=new Image,this.img.src=B}return e.getCarLocationBasedEnemyRaceCarPosition=function(e,n){var t=100*Math.random()<50?1:-1,i=.35*parseFloat(Math.random().toFixed(2))*e.width,o=n.posX+.5*n.width+t*i;return(o=o>e.posX+e.width-1.5*n.width?e.posX+e.width-1.5*n.width:o)<e.posX?e.posX:o},e}(),E=t.p+"b4eb7ef2e833121435d0bfc428e24041.png",x=function(){function e(n,t,i){this.dimensions={posX:e.getCarLocationBasedEnemyCarPosition(n,i),posY:n.posY-f,height:f,width:u},this.speed=t,this.img=new Image,this.img.src=E}return e.getCarLocationBasedEnemyCarPosition=function(e,n){var t=100*Math.random()<50?1:-1,i=.25*parseFloat(Math.random().toFixed(2))*e.width,o=n.posX+.5*n.width+t*i;return(o=o>e.posX+e.width-1.5*u?e.posX+e.width-1.5*u:o)<e.posX?e.posX:o},e}(),S=function(){function e(e,n){this.roadDimensions=e,this.car=n}return e.prototype.createVehicle=function(e,n){return e==w.car?new C(this.roadDimensions,n,this.car.getDimensions()):e==w.truck?new x(this.roadDimensions,n,this.car.getDimensions()):e==w.raceCar?new v(this.roadDimensions,n,this.car.getDimensions()):null},e}(),I=function(){function e(e,n){this.roadDimensions=e,this.car=n,this.ctx=M,this.enemyVehicleFactory=new S(e,n);var t=this.enemyVehicleFactory.createVehicle(w.car,h);this.latestEnemyVehicle=t,this.enemyVehicles=[t]}return e.prototype.insertNewEnemyVehicle=function(){if(this.latestEnemyVehicle.dimensions.posY>.25*this.roadDimensions.height&&Math.round(100*Math.random())<=10)if(Math.round(1e3*Math.random())<=200){var e=this.enemyVehicleFactory.createVehicle(w.truck,h);this.latestEnemyVehicle=e,this.enemyVehicles.push(e)}else if(Math.round(1e3*Math.random())>=900){var n=this.enemyVehicleFactory.createVehicle(w.raceCar,d);this.latestEnemyVehicle=n,this.enemyVehicles.push(n)}else{var t=this.enemyVehicleFactory.createVehicle(w.car,h);this.latestEnemyVehicle=t,this.enemyVehicles.push(t)}},e.prototype.deleteEnemyVehicle=function(){var e=this;this.enemyVehicles=this.enemyVehicles.filter((function(n){return!(n.dimensions.posY>e.roadDimensions.posY+e.roadDimensions.height)}))},e.prototype.updatePosition=function(){this.insertNewEnemyVehicle(),this.enemyVehicles.forEach((function(e){e.dimensions.posY+=e.speed})),this.deleteEnemyVehicle()},e.prototype.draw=function(){var e=this;this.ctx.fillStyle="#f00",this.enemyVehicles.forEach((function(n){e.ctx.drawImage(n.img,n.dimensions.posX,n.dimensions.posY)}))},e.prototype.detectCollision=function(){for(var e=this.car.getDimensions(),n=0,t=this.enemyVehicles;n<t.length;n++){var i=t[n].dimensions;if(i.posX<e.posX+e.width&&i.posX+i.width>e.posX&&i.posY<e.posY+e.height&&i.posY+i.height>e.posY)return!0}return!1},e}(),k=t.p+"e51479c288930b2152f712284edd2e76.mp3",X=t.p+"64267ce48e323a1e125ba00bdd02b010.png",Y=function(){function e(e,n){this.gameArea=e,this.ctx=n,this.lastRenderTime=0,this.isGameInitialized=!1,this.isRunning=!1,this.carCrashAudio=new Audio(k),this.grassSprite=new Image,this.grassSprite.src=X}return e.prototype.initialize=function(){this.isGameInitialized=!0,this.road=new m,this.car=new y(c,this.road.getDimensions()),this.enemyVehicleManager=new I(this.road.getDimensions(),this.car);var e=this.ctx.createPattern(this.grassSprite,"repeat");this.ctx.rect(0,0,this.gameArea.width,this.gameArea.height),this.ctx.fillStyle=e,this.ctx.fill()},e.prototype.gameLoop=function(e){this.lastRenderTime,this.lastRenderTime=e,this.road.draw(),this.car.draw(),this.enemyVehicleManager.draw(),this.road.update(),this.enemyVehicleManager.updatePosition(),this.car.updatePosition(),this.enemyVehicleManager.detectCollision()&&(V&&(j.className="icon-play"),this.carCrashAudio.play(),this.isGameInitialized=!1,this.isRunning=!1),this.isRunning&&requestAnimationFrame(this.gameLoop.bind(this))},e.prototype.run=function(){!0!==this.isRunning&&(this.initialize(),this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.continue=function(){!0!==this.isRunning&&(this.isRunning=!0,requestAnimationFrame(this.gameLoop.bind(this)))},e.prototype.pause=function(){!1!==this.isRunning&&(this.isRunning=!1)},e}(),D=t.p+"44d80d2e608a80573cfa2eef6bf6b73c.mp3";var V=window.innerWidth<480;V?document.getElementById("mobileController").style.display="flex":document.getElementById("instructions").style.display="block";var R=document.querySelector("#gameArea");R.width=V?window.innerWidth:800,R.height=V?window.innerHeight/1.1:600;var L={width:R.width,height:R.height},M=R.getContext("2d"),z=new Audio(D),F=new Y(R,M),j=document.getElementById("playpause");document.addEventListener("keydown",(function(e){"Space"===e.code&&(F.isGameInitialized?F.isRunning?(j.className="icon-play",z.play(),F.pause()):(j.className="icon-pause",z.play(),F.continue()):(j.className="icon-pause",z.play(),F.run()))})),j.addEventListener("click",(function(e){F.isGameInitialized?F.isRunning?(j.className="icon-play",z.play(),F.pause()):(j.className="icon-pause",z.play(),F.continue()):(j.className="icon-pause",z.play(),F.run())}))}},n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={id:i,exports:{}};return e[i](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var i=n.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t(258)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,